{"version":3,"sources":["services/persons.js","components/Person.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Person","person","removePerson","name","number","onClick","Notification","notification","className","type","message","Filter","handleFilter","filter","value","onChange","PersonForm","handleNameChange","handleNumberChange","addName","newName","newNumber","onSubmit","Persons","persons","toLowerCase","includes","map","App","props","useState","setPersons","setNewName","setNewNumber","setFilter","setNotification","useEffect","personService","initialPersons","notify","setTimeout","event","target","preventDefault","nameObject","find","o","window","confirm","changedPerson","p","catch","error","returnedPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cfb0e111.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n   \r\n  \r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { getAll, create, remove, update }\r\n\r\n","import React from 'react'\r\n\r\nconst Person = ({ person, removePerson }) => {\r\n  \r\n  return (\r\n    <div>\r\n      {person.name} {person.number} <button onClick={() => removePerson({person})}> delete </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\n\r\nconst Notification = ({ notification }) => {\r\n  if (notification === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className={notification.type}>\r\n      {notification.message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport Person from './components/Person'\nimport Notification from './components/Notification'\nimport './index.css'\n\n\n\nconst Filter = ({ handleFilter, filter}) => (\n  <form>\n      <div>\n        filter shown with\n        <input value={filter}\n        onChange={handleFilter}\n        />\n      </div>\n      </form>\n)\nconst PersonForm = ({ handleNameChange, handleNumberChange, addName, newName, newNumber }) => (\n  <form onSubmit={addName}>\n    <div> \n        name:\n        <input value={newName} \n        onChange={handleNameChange}\n          />\n    </div>\n    <div>\n        number: \n        <input value={newNumber}\n        onChange={handleNumberChange}\n        />\n        <button type=\"submit\">add</button>\n        </div>\n        </form>\n)\n\nconst Persons = ({persons, filter, removePerson}) => {\n  return (\n    <div>\n      {persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n      .map(person => <Person key={person.name} person={person} removePerson={removePerson}/> )}\n    </div>\n    )\n  }\n\n\n\nconst App = (props) => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [filter, setFilter] = useState('')\n  const [notification, setNotification] = useState(null)\n  \n  \n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const notify = (message, type='success') => {\n    setNotification({ message, type })\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n  \n  const addName = (event) => {\n    event.preventDefault()\n    const nameObject = {\n      name: newName,\n      number: newNumber}\n    if (persons.find(o => o.name === newName)) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const name=persons.find(o => o.name === newName)\n        personService\n          .update(name.id, nameObject)\n          .then(changedPerson=>{\n            setPersons(persons.map(p => p.id !== name.id ? p : changedPerson))\n            notify(\n              `Updated ${newName}`\n            )\n        })\n        .catch(error => notify(`Information of ${newName} has already been removed from server`, 'error'))\n  }  \n  }\n    else {\n    personService\n      .create(nameObject)\n        .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        notify(\n          `Added ${newName} `\n        )\n        setNewName('')\n        setNewNumber('')\n    })\n    .catch(error => {\n      notify(`${error.response.data.error}`, 'error')\n    })\n}\n  }\n  const removePerson = ({person}) => {\n    if (window.confirm(`Delete '${person.name}'?`)) {\n      personService\n        .remove(person.id)\n        .then(response =>{\n          setPersons(persons.filter(p => p.id !== person.id))\n          notify(`Deleted ${person.name} `)\n        }).catch(error => {\n            notify(`Information of ${person.name} has already been removed from server`, 'error')\n        })\n      }\n    }\n\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  const handleFilter = (event) => {\n    setFilter(event.target.value)\n  }\n  \n  \n  return (\n    \n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} />\n      <Filter filter={filter} handleFilter={handleFilter} />\n      <h2>add a new</h2>\n      <PersonForm handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} \n      newName={newName} addName={addName} newNumber={newNumber}/>\n      <h2>Numbers</h2>\n      <Persons persons={persons} filter={filter} removePerson={removePerson}/>\n    </div>\n  )\n\n}\nexport default App;","import ReactDOM from 'react-dom'\nimport App from './App'\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}